import { useRef, useState } from 'react';
import { PlusOutlined } from '@ant-design/icons';
import type { ActionType, ProColumns } from '@ant-design/pro-components';
import {
  PageContainer,
  {{#if customTableComponentPath}}
  {{^}}
  ProTable,
  {{/if}}
  type FormInstance
} from '@ant-design/pro-components';
import { Button, Modal } from 'antd';
{{#if customTableComponentPath}}
import ProTable from '{{customTableComponentPath}}';
{{/if}}
import {{name}}{{> globalEditFormSuffix }} from './{{name}}{{> globalEditFormSuffix }}';
{{#if tabs}}
import {{name}}StatusModal from './{{name}}StatusModal'
{{/if}}
import { get{{name}}List, remove{{name}} } from './service';
import { columnsAutoTriggerSearch } from '@/utils/pro'
import { DEFAULT_SEARCH_SPAN, DEFAULT_PAGE_SIZE } from '@/globalConstants'
{{#if tabs}}
import { STATUS_MAP, STATUS_TAB_LIST } from './constants';
{{/if}}
import type { {{name}}ListItem, {{name}}ListPagination } from './data';

const {{name}}Page: React.FC = () => {
  /** 新建/编辑窗口的弹窗 */
  const [editModalState, setEditModalState] = useState<{ open: boolean, data?: {{name}}ListItem }>({ open: false });
  {{#if tabs}}
  const [listParams, setListParams] = useState<{ status: number | undefined }>({ status: STATUS_MAP.{{tabs.[0].key}} });
  const [selectedRows, setSelectedRows] = useState<{{name}}ListItem[]>([]);
  {{/if}}
  const actionRef = useRef<ActionType>();
  const formRef = useRef<FormInstance>();

  const columns: ProColumns<{{name}}ListItem>[] = columnsAutoTriggerSearch<{{name}}ListItem>([
    {{#columns}}
    {
      title: '{{title}}',
      dataIndex: '{{dataIndex}}'
    },
    {{/columns}}
    {
      title: '操作',
      dataIndex: 'option',
      valueType: 'option',
      render: (_, record) => [
        <a key="edit" onClick={() => openEditModal(record)}>编辑</a>,
        {{#if tabs}}
        <a key="changeStatus" onClick={() => openStatusModal([record])}>修改状态</a>,
        {{/if}}
        <a key="delete" onClick={confirmRemove(record)}>删除</a>
      ],
    },
  ], formRef);

  function openEditModal(data?: {{name}}ListItem) {
    setEditModalState({ open: true, data })
  }

  function closeEditModalOpen() {
    setEditModalState({ ...editModalState, open: false })
  }

  function afterFormUpdate() {
    setEditModalState({ ...editModalState, open: false })
    actionRef.current?.reload()
  }

  {{#if tabs}}
  function openStatusModal(dataList?: ProductListItem[]) {
    setStatusModalState({ open: true, dataList })
  }

  function closeStatusModal() {
    setStatusModalState({ ...statusModalState, open: false })
  }

  function afterStatusModalUpdate() {
    setStatusModalState({ ...statusModalState, open: false })
    actionRef.current?.reload()

    if (actionRef.current?.clearSelected) {
      actionRef.current.clearSelected()
      setSelectedRows([])
    }
  }
  {{/if}}
  function confirmRemove(row: {{name}}ListItem) {
    return () => {
      Modal.confirm({
        title: '删除',
        content: `确定删除？`,
        icon: null,
        onOk: () => {
          handleRemove(row)
        },
      })
    }
  }

  async function handleRemove(row: {{name}}ListItem) {
    const flag = await remove{{name}}(row)

    if (flag) {
      actionRef.current?.reload()
    }
  }

  return (
    <PageContainer
      header=\{{ breadcrumb: {} }}
      {{#if tabs}}
      tabProps=\{{ defaultActiveKey: `${ STATUS_MAP.{{tabs.[0].key}} }` }}
      tabList={STATUS_TAB_LIST}
      onTabChange={key => {
        setListParams({ status: key === 'all' ? undefined : parseInt(key) })
      }}
      {{/if}}
    >
      <ProTable<{{name}}ListItem, {{name}}ListPagination>
        actionRef={actionRef}
        formRef={formRef}
        {{#if tabs}}
        params={listParams as any}
        {{/if}}
        rowKey="{{rowKey}}"
        toolBarRender={() => [
          <Button
            key="add"
            type="primary"
            onClick={() => {
              setEditModalState({ open: true  });
            }}
          >
            <PlusOutlined /> 新建
          </Button>,
          {{#if tabs}}
          <Button
            key="changeStatus"
            type="primary"
            ghost
            disabled={!selectedRows.length}
            onClick={() => openStatusModal(selectedRows)}
          >
            批量修改状态
          </Button>
          {{/if}}
        ]}
        options=\{{ fullScreen: false, reload: true, density: true, setting: false }}
        request={get{{name}}List}
        columns={columns}
        {{#if tabs}}
        rowSelection=\{{
          onChange: (_, selectedRows) => {
            setSelectedRows(selectedRows);
          },
        }}
        {{/if}}
        search=\{{ span: DEFAULT_SEARCH_SPAN }}
        pagination=\{{ defaultPageSize: DEFAULT_PAGE_SIZE, showSizeChanger: true }}
      />

      <{{name}}{{> globalEditFormSuffix }}
        open={editModalState.open}
        data={editModalState.data}
        onCancel={closeEditModalOpen}
        onUpdated={afterFormUpdate}
      />

      {{#if tabs}}
      <{{name}}StatusModal
        open={statusModalState.open}
        dataList={statusModalState.dataList}
        onUpdated={afterStatusModalUpdate}
        onCancel={closeStatusModal}
      />
      {{/if}}
    </PageContainer>
  );
};

export default {{name}}Page;
